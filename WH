#!/bin/bash
set -e

echo "CrÃ©ation du dossier du projet paint-converter-app"
mkdir -p paint-converter-app/public paint-converter-app/src
cd paint-converter-app

echo "CrÃ©ation de package.json"
cat > package.json << 'EOF'
{
  "name": "paint-converter-app",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.0.0",
    "vite": "^4.0.0"
  }
}
EOF

echo "CrÃ©ation de vite.config.js"
cat > vite.config.js << 'EOF'
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  plugins: [react()]
});
EOF

echo "CrÃ©ation de public/index.html"
cat > public/index.html << 'EOF'
<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Paint Converter</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
EOF

echo "CrÃ©ation de src/main.jsx"
cat > src/main.jsx << 'EOF'
import React from "react";
import ReactDOM from "react-dom/client";
import PaintConverter from "./PaintConverter.jsx";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <PaintConverter />
  </React.StrictMode>
);
EOF

echo "CrÃ©ation de src/PaintConverter.jsx"
cat > src/PaintConverter.jsx << 'EOF'
import { useState, useEffect } from "react";

const DATA_URL =
  "https://raw.githubusercontent.com/openai-lab/paint-equivalents/main/paint-data.json";

export default function PaintConverter() {
  const [paintEquivalents, setPaintEquivalents] = useState({});
  const [allBrands, setAllBrands] = useState([]);
  const [fromBrand, setFromBrand] = useState("");
  const [toBrand, setToBrand] = useState("");
  const [colorName, setColorName] = useState("");
  const [result, setResult] = useState(null);

  useEffect(() => {
    fetch(DATA_URL)
      .then((res) => res.json())
      .then((data) => {
        setPaintEquivalents(data);
        const brands = Object.keys(data);
        setAllBrands(brands);
        setFromBrand(brands[0]);
        setToBrand(brands[1]);
      })
      .catch(() => {
        setResult("Erreur de chargement des donnÃ©es de conversion.");
      });
  }, []);

  const handleConvert = () => {
    const equivalents = paintEquivalents[fromBrand]?.[colorName];
    if (equivalents && equivalents[toBrand]) {
      setResult(`${colorName} (${fromBrand}) â‰ˆ ${equivalents[toBrand]} (${toBrand})`);
    } else {
      setResult("Aucune correspondance trouvÃ©e.");
    }
  };

  return (
    <div
      style={{
        maxWidth: 600,
        margin: "2rem auto",
        padding: "2rem",
        background:
          "linear-gradient(to bottom, #f0f4f8, #ffffff)",
        borderRadius: 24,
        boxShadow:
          "0 10px 20px rgba(0,0,0,0.1)",
        fontFamily: "system-ui, sans-serif",
      }}
    >
      <h1 style={{ textAlign: "center", marginBottom: 24, fontWeight: "bold" }}>
        ðŸŽ¨ Convertisseur de Peintures
      </h1>
      {allBrands.length > 0 && (
        <>
          <div style={{ display: "flex", gap: 12, marginBottom: 16 }}>
            <div style={{ flex: 1 }}>
              <label>De la marque :</label>
              <select
                style={{ width: "100%", padding: 8, fontSize: 16 }}
                value={fromBrand}
                onChange={(e) => setFromBrand(e.target.value)}
              >
                {allBrands.map((brand) => (
                  <option key={brand} value={brand}>
                    {brand}
                  </option>
                ))}
              </select>
            </div>
            <div style={{ flex: 1 }}>
              <label>Vers la marque :</label>
              <select
                style={{ width: "100%", padding: 8, fontSize: 16 }}
                value={toBrand}
                onChange={(e) => setToBrand(e.target.value)}
              >
                {allBrands.map((brand) => (
                  <option key={brand} value={brand}>
                    {brand}
                  </option>
                ))}
              </select>
            </div>
          </div>
          <div style={{ marginBottom: 16 }}>
            <label>Nom de la couleur :</label>
            <input
              type="text"
              placeholder="Ex: Mephiston Red"
              value={colorName}
              onChange={(e) => setColorName(e.target.value)}
              style={{
                width: "100%",
                padding: 8,
                fontSize: 16,
                borderRadius: 6,
                border: "1px solid #ccc",
              }}
            />
          </div>
          <div style={{ textAlign: "center", marginBottom: 16 }}>
            <button
              onClick={handleConvert}
              style={{
                padding: "10px 24px",
                fontSize: 16,
                backgroundColor: "#007bff",
                color: "#fff",
                border: "none",
                borderRadius: 6,
                cursor: "pointer",
              }}
            >
              Convertir
            </button>
          </div>
        </>
      )}
      {result && (
        <div
          style={{
            backgroundColor: "#e6f0ff",
            padding: 16,
            borderRadius: 12,
            fontWeight: "bold",
            textAlign: "center",
          }}
        >
          {result}
        </div>
      )}
    </div>
  );
}
EOF

echo "âœ… Projet crÃ©Ã© !"
echo "Pour lancer l'application :"
echo "1) cd paint-converter-app"
echo "2) npm install"
echo "3) npm run dev"
echo "Puis ouvrir http://localhost:5173"
